-----------------------------------------------------------------
Date types in python:
> string
> digits  (int, float and double)
> boolean (True, False)
-----------------------------------------------------------------
String:
> phrase = "something"
> phrase.lower() and phrase.upper()
length of string:
> len(phrase)
> phrase.index("o") ---> 0
> phrase.replace("something", "new_something")
-----------------------------------------------------------------
Digits:
> all operations that you know in math
my_num = 5
convert number into string is : str(my_num)
-----------------------------------------------------------------
Input information:
name = input()
-----------------------------------------------------------------
Lists:
list = [any piece of information]
list functions:
1) .extend():
> numbers = [4, 8, 15, 16, 23, 42]
> friends = ["Max", "Karen", "Jim"]
> friends.extend(numbers) ---> ["Max", ... , 42]
2) .append():
add item into the end of list
3) .insert():
> insert(1, "Kelly")
4) .remove():
removes one of the element
5) .clear():
delete all list
6) .pop():
removes the last element
7) .sort():
sorts the list
8) .reverse()
-----------------------------------------------------------------
Tuples:
touple is immutable!
-----------------------------------------------------------------
Dictionaries:

key <---> value

monthConversions = {
    "Jan": "January",
    "Feb": "February",
    "Mar": "March",
}

monthConversions["Feb"] ---> February
monthConversions.get("Feb") ---> February
-----------------------------------------------------------------
Try except:
It is used for catching errors

try:
    number = int(input("Enter a number: "))
    print(number)
except:
    print("Invalid Input!")

eg: value = 10/0 ---> calls an error

x =-5
if x < 0:
    raise Exception("x should be positive")

eg: Exception: x should be positive
-----------------------------------------------------------------
Reading files:

< read information from file >:

employees.txt:

   Jim - Salesman
   Dwight - Salesman
   Pam - Receptionist
   Michael - Manager
   Oscar - Accountant

employee_file = open("employees.txt", "r") 
(r - read, w - write, a - append, r+ - read and write)
print(employee_file.read())
employee_file.close()

Writing to files:

< write information to file >:

employee_file = open("employees.txt", "a")
employee_file.write("\nnew employees")
employee_file.close()
-----------------------------------------------------------------
List of python models:
link ---> https://docs.python.org/3/py-modindex.html
-----------------------------------------------------------------
Python 3 math module:
link ---> https://docs.python.org/3/library/math.html
-----------------------------------------------------------------
Value escaping:
string = 'I'm Max' -> error
string = 'I\'m Max'
-----------------------------------------------------------------
Collections:

> Counter:

a = "aaaaaabbbccc"
my_counter = Counter(a)
Counter({'a': 6, 'b': 3, 'c': 3})

> Namedtuple:

Point = namedtuple('Point', 'x,y')
pt = Point(1, 2)
Point(x=1, y=2)

> OrderedDict:

ordered_dict = OrderedDict()
ordered_dict['a'] = 1
ordered_dict['b'] = 2
ordered_dict['c'] = 3
OrderedDict([('a', 1), ('b', 2), ('c', 3)])

> DefaultDict:

d = defaultdict(int)
d['a'] = 1
d['b'] = 2
defaultdict(<class 'int'>, {'a': 1, 'b': 2})

> Deque:

d = deque()
d.append(1)
d.append(2)
deque([1, 2])
-----------------------------------------------------------------
Process: An instance of a program (e.g a Python interpreter)

+ Takes advantage of multiple CPUs and cores
+ Separate memory space -> Memory is not shared between processes
+ Great for CPU-bound processing
+ New process is started independently from other processes
+ Processes are interruptable/killable
+ One GIL for each process -> avoids GIL limitation

- Heavyweight
- Starting a process is slower than starting a thread
- More memory
- IPC (inter-process communication) is more complicated
-----------------------------------------------------------------
Threads: An entity within a process that can be scheduled (also
known as "leightweight process")
A process can spawn multiple threads

+ All threads within a process share the same memory
+ Leightweight
+ Starting a thread is faster than starting a process
+ Great for I/O-bound tasks

- Threading is limited by GIL: Only one thread at a time
- No effect for CPU-bound tasks
- Not interruptable/killable
- Careful with race conditions
-----------------------------------------------------------------
GIL: Global interpreter lock

- A lock that allows only one thread at a time to execute in
  Python

- Needed in CPython because memory management is not thread-safe

- Avoid:
  - Use multiprocessing
  - Use a different, free-threaded Python implementation (Jython,
    IronPython)
  - Use Python as a wrapper for third-party libraries (C/C++) ->
    -> numpy, scipy
-----------------------------------------------------------------